{"version":3,"sources":["img/logo.png","components/CharactersList.js","components/Pagination.js","components/CharactersPage.js","components/CharacterDetailsPage.js","components/ErrorPage.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","BuildCharactersList","props","charactersList","data","results","map","character","splitURL","url","split","characterId","length","key","className","to","pathname","state","id","name","Pagination","numberOfPages","selectedButton","click","pageButton","i","push","type","onClick","bind","CharactersPage","src","img","alt","CharacterDetailsPage","this","location","fechData","then","setState","gender","height","mass","birth_year","hair_color","skin_color","eye_color","Component","ErrorPage","API_END_POINT","App","errorMessage","handleButtonsForCharactersListChange","pageId","fetchData","showError","error","toString","API","fetch","response","ok","Error","status","json","catch","console","log","undefined","Math","ceil","count","basename","process","path","exact","component","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.466d0864.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0db60869.png\";","import React from \"react\";\r\nimport \"./CharactersList.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst BuildCharactersList = (props) => {\r\n  const characters = props.data.results;\r\n  const charactersList = characters.map((character) => {\r\n    const splitURL = character.url.split(\"/\");\r\n    const characterId = splitURL[splitURL.length - 2];\r\n    return (\r\n      <div key={characterId} className=\"characterBlock\">\r\n        <Link\r\n          className=\"characterName\"\r\n          to={{\r\n            pathname: \"/character-details\",\r\n            state: {\r\n              characterId,\r\n            },\r\n          }}\r\n        >\r\n          <i className=\"icon-star-2\" id=\"i\"></i>\r\n          {character.name}\r\n        </Link>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <nav>{charactersList}</nav>;\r\n};\r\n\r\nexport default BuildCharactersList;\r\n","import React from \"react\";\r\nimport \"./Pagination.css\";\r\n\r\nconst Pagination = (props) => {\r\n  const { numberOfPages, selectedButton, click } = props;\r\n  const pageButton = [];\r\n  for (let i = 1; i <= numberOfPages; i++) {\r\n    pageButton.push(\r\n      <button\r\n        key={i}\r\n        className={i === selectedButton ? \"selected\" : \"\"}\r\n        type=\"button\"\r\n        onClick={click.bind(this, i)}\r\n      >\r\n        {i}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return pageButton;\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport img from \"../img/logo.png\";\r\nimport CharacterList from \"./CharactersList\";\r\nimport Pagination from \"./Pagination\";\r\nimport \"./CharactersPage.css\";\r\n\r\nconst CharactersPage = (props) => {\r\n  const { data, numberOfPages, click, selectedButton } = props;\r\n  return (\r\n    <div className=\"charactersPageWrapper\">\r\n      <header>\r\n        <div className=\"imgWrapper\">\r\n          <img src={img} alt=\"Star Wars Logo\" />\r\n        </div>\r\n      </header>\r\n      <main>\r\n        <h1 className=\"textCharacters\">Characters</h1>\r\n        <section>\r\n          <div className=\"charactersListWrapper\">\r\n            {data ? <CharacterList data={data} /> : data}\r\n          </div>\r\n        </section>\r\n        <footer className=\"paginationWrapper\">\r\n          {data ? (\r\n            <Pagination\r\n              numberOfPages={numberOfPages}\r\n              click={click}\r\n              selectedButton={selectedButton}\r\n            />\r\n          ) : (\r\n            data\r\n          )}\r\n        </footer>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharactersPage;\r\n","import React, { Component } from \"react\";\r\nimport \"./CharacterDetailsPage.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass CharacterDetailsPage extends Component {\r\n  state = {\r\n    data: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { characterId } = this.props.location.state;\r\n    const url = `https://swapi.dev/api/people/${characterId}/`;\r\n    this.props.fechData(url).then((data) => {\r\n      this.setState({\r\n        data,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      name,\r\n      gender,\r\n      height,\r\n      mass,\r\n      birth_year,\r\n      hair_color,\r\n      skin_color,\r\n      eye_color,\r\n    } = this.state.data;\r\n    return (\r\n      <>\r\n        <div className=\"detailsWrapper\">\r\n          <div className=\"text\">Name:</div>\r\n          <div className=\"data\">{name}</div>\r\n          <div className=\"text\">Gender:</div>\r\n          <div className=\"data\">{gender}</div>\r\n          <div className=\"text\">Height:</div>\r\n          <div className=\"data\">{height}</div>\r\n          <div className=\"text\">Mass:</div>\r\n          <div className=\"data\">{mass}</div>\r\n          <div className=\"text\">Birth year:</div>\r\n          <div className=\"data\">{birth_year}</div>\r\n          <div className=\"text\">Hair color:</div>\r\n          <div className=\"data\">{hair_color}</div>\r\n          <div className=\"text\">Skin color:</div>\r\n          <div className=\"data\">{skin_color}</div>\r\n          <div className=\"text\">Eye color:</div>\r\n          <div className=\"data\">{eye_color}</div>\r\n        </div>\r\n        <Link className=\"returnWrapper\" to=\"/\">\r\n          <i className=\"fas fa-undo-alt\" id=\"return\"></i>\r\n        </Link>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterDetailsPage;\r\n","import React from \"react\";\r\nimport \"./ErrorPage.css\";\r\n\r\nconst ErrorPage = () => {\r\n  return (\r\n    <div className=\"errorMassage\">\r\n      <h1>The given page does not exist</h1>\r\n      <h2>Try entering the correct link</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPage;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport CharactersPage from \"./CharactersPage\";\nimport CharacterDetailsPage from \"./CharacterDetailsPage\";\nimport ErrorPage from \"./ErrorPage\";\nimport \"./ErrorPage.css\";\n\nconst API_END_POINT = \"https://swapi.dev/api/people/\";\n\nclass App extends Component {\n  state = {\n    data: null,\n    errorMessage: false,\n    selectedButton: 1,\n    numberOfPages: 0,\n  };\n\n  selectedButton = (selectedButton) => {\n    this.setState({\n      selectedButton,\n    });\n  };\n\n  handleButtonsForCharactersListChange = (pageId) => {\n    this.fetchData(API_END_POINT + `?page=${pageId}`).then((data) => {\n      this.setState({\n        data,\n      });\n    });\n    this.selectedButton(pageId);\n  };\n\n  showError = (error) => {\n    let errorMessage;\n\n    switch (error.toString()) {\n      case \"Error: 404\":\n        errorMessage = \"Error 404: File not found\";\n        break;\n      case \"Error: 403\":\n        errorMessage = \"Error 403: Forbidden\";\n        break;\n      case \"Error: 500\":\n        errorMessage = \"Error 500: Internal Server Error\";\n        break;\n      case \"Error: 503\":\n        errorMessage = \"Error 503: Service Unavailable\";\n        break;\n      case \"Error: 504\":\n        errorMessage = \"Error 504: Gateway Timeout\";\n        break;\n      default:\n        errorMessage = \"Something went wrong\";\n        break;\n    }\n\n    this.setState({\n      errorMessage,\n    });\n  };\n\n  fetchData = (API) => {\n    return fetch(API)\n      .then((response) => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(response.status);\n      })\n      .then((response) => response.json())\n      .catch((error) => this.showError(error));\n  };\n\n  componentDidMount() {\n    this.fetchData(API_END_POINT).then((data) => {\n      console.log(data);\n      if (data !== undefined) {\n        this.setState({\n          data,\n          numberOfPages: Math.ceil(data.count / data.results.length),\n        });\n      }\n    });\n  }\n\n  render() {\n    const { errorMessage, numberOfPages, data, selectedButton } = this.state;\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Switch>\n            <Route\n              path=\"/\"\n              exact\n              component={() =>\n                errorMessage ? (\n                  <div className=\"errorMassage\">\n                    <h2>{errorMessage}</h2>\n                  </div>\n                ) : (\n                  <CharactersPage\n                    numberOfPages={numberOfPages}\n                    data={data}\n                    click={this.handleButtonsForCharactersListChange}\n                    selectedButton={selectedButton}\n                  />\n                )\n              }\n            />\n            <Route\n              path=\"/character-details\"\n              render={(props) => (\n                <CharacterDetailsPage {...props} fechData={this.fetchData} />\n              )}\n            />\n            <Route component={ErrorPage} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}